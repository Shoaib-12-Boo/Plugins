
/**
 * The plugin bootstrap file
 *
 * This file is read by WordPress to generate the plugin information in the plugin
 * admin area. This file also includes all of the dependencies used by the plugin,
 * registers the activation and deactivation functions, and defines a function
 * that starts the plugin.
 *
 * @link              https://techosolution.com
 * @since             1.0.0
 * @package           Meal_Customization
 *
 * @wordpress-plugin
 * Plugin Name:       Meal Customization
 * Plugin URI:        https://techosolution.com
 * Description:       Meal Customization
 * Version:           1.0.0
 * Author:            Hafiz Hamza Javed
 * Author URI:        https://techosolution.com/
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       meal-customization
 * Domain Path:       /languages
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

/**
 * Currently plugin version.
 * Start at version 1.0.0 and use SemVer - https://semver.org
 * Rename this for your plugin and update it as you release new versions.
 */
define( 'MEAL_CUSTOMIZATION_VERSION', '1.0.0' );

/**
 * The code that runs during plugin activation.
 * This action is documented in includes/class-meal-customization-activator.php
 */
function activate_meal_customization() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-meal-customization-activator.php';
	Meal_Customization_Activator::activate();
}

/**
 * The code that runs during plugin deactivation.
 * This action is documented in includes/class-meal-customization-deactivator.php
 */
function deactivate_meal_customization() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-meal-customization-deactivator.php';
	Meal_Customization_Deactivator::deactivate();
}

register_activation_hook( __FILE__, 'activate_meal_customization' );
register_deactivation_hook( __FILE__, 'deactivate_meal_customization' );

/**
 * The core plugin class that is used to define internationalization,
 * admin-specific hooks, and public-facing site hooks.
 */
require plugin_dir_path( __FILE__ ) . 'includes/class-meal-customization.php';

/**
 * Begins execution of the plugin.
 *
 * Since everything within the plugin is registered via hooks,
 * then kicking off the plugin from this point in the file does
 * not affect the page life cycle.
 *
 * @since    1.0.0
 */
function run_meal_customization() {
    $plugin = new Meal_Customization();
    $plugin->run();
}
run_meal_customization();

add_action('wsf_enqueue_scripts', 'enqueue_custom_radio_check_script');
// function enqueue_custom_radio_check_script() {
//     wp_enqueue_script('custom-radio-check', plugin_dir_path( __FILE__ ) .  '/public/js/custom-radio-check.js', array(), null, true);
// }
function enqueue_custom_radio_check_script() {
    wp_enqueue_script('custom-radio-check', plugins_url('public/js/custom-radio-check.js', __FILE__), array(), null, true);
}


add_action('woocommerce_before_cart', 'check_cart_quantities');
add_action('woocommerce_single_product_summary', 'check_cart_quantities');

function check_cart_quantities() {
    $target_product_id = 9967; // Replace with the ID of the specific product
    $cart_items = WC()->cart->get_cart();
    $pack_quantity = 0;
    $cart_quantity = 0;
    $product_found = false;

    foreach ($cart_items as $cart_item_key => $cart_item) {
        if ($cart_item['product_id'] == $target_product_id) {
            $product_found = true;

            if (isset($cart_item['wsf_item_data']) && !empty($cart_item['wsf_item_data'])) {
                foreach ($cart_item['wsf_item_data'] as $meta_data) {
                    if (isset($meta_data['key']) && $meta_data['key'] === 'Select your pack') {
                        $pack_quantity = intval($meta_data['value']);
                    }
                }
            }
            $cart_quantity += $cart_item['quantity'];
        }
    }

    if ($product_found) {

        
            
        if ( !is_product() ) {
            // Define the HTML for radio buttons with pre-selection based on pack quantity
            $radio_buttons_html = '
            <style>
                .radio-container {
                    display: flex;
                    align-items: center;
                }
                .radio-container label {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 50px;
                    height: 50px;
                    border: 2px solid #62a901;
                    border-radius: 5px;
                    margin-right: 20px;
                    cursor: pointer;
                }
                .radio-container input[type="radio"] {
                    display: none;
                }
                .radio-container input[type="radio"]:checked + label {
                    background-color: #62a901;
                    color: white;
                }
            </style>


            <p>Fill your Pack</p>
            </br>
            <p id="pack-status">' . $cart_quantity . '/' . $pack_quantity . '</p>

            <form style="width: 100%;">
                <div class="radio-container">
                    <input type="radio" id="ratio6" name="ratio" value="6" ' . ($pack_quantity == 6 ? 'checked' : '') . '>
                    <label for="ratio6">6</label>
                    <input type="radio" id="ratio8" name="ratio" value="8" ' . ($pack_quantity == 8 ? 'checked' : '') . '>
                    <label for="ratio8">8</label>
                    <input type="radio" id="ratio10" name="ratio" value="10" ' . ($pack_quantity == 10 ? 'checked' : '') . '>
                    <label for="ratio10">10</label>
                    <input type="radio" id="ratio12" name="ratio" value="12" ' . ($pack_quantity == 12 ? 'checked' : '') . '>
                    <label for="ratio12">12</label>
                    <input type="radio" id="ratio14" name="ratio" value="14" ' . ($pack_quantity == 14 ? 'checked' : '') . '>
                    <label for="ratio14">14</label>
                </div>
            </form>';
        }
        echo '<script>
                window.packQuantity = ' . $pack_quantity . ';
            </script>';
            // Check cart quantities and display notices accordingly
        if ($cart_quantity < $pack_quantity) {
            wc_print_notice('Please complete your food pack. (' . $cart_quantity . '/' . $pack_quantity . ')', 'error');
            echo $radio_buttons_html;
            add_action('wp_footer', 'disable_checkout_button');
        } elseif ($cart_quantity > $pack_quantity) {
            wc_print_notice('Please select another food pack. (' . $cart_quantity . '/' . $pack_quantity . ')', 'error');
            echo $radio_buttons_html;
            add_action('wp_footer', 'disable_checkout_button');
        }
        // Additional logic for single product page
        if (is_product() && get_the_ID() == $target_product_id) {
            echo $radio_buttons_html;
        }

    }
}

function disable_checkout_button() {
    ?>
    <style>
        ul.woocommerce-error {
            width: 100%;
        }
    </style>
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            var checkoutButton = $('.checkout-button');
            checkoutButton.addClass('disabled').click(function(event) {
                event.preventDefault();
            });

            // Update pack status on cart update
            $('body').on('updated_cart_totals', function() {
                $.post('<?php echo admin_url('admin-ajax.php'); ?>', { action: 'update_pack_status' }, function(response) {
                    $('#pack-status').html(response.pack_status);
                });
            });
        });
    </script>
    <?php
}

// AJAX handler to update pack status
add_action('wp_ajax_update_pack_status', 'update_pack_status');
add_action('wp_ajax_nopriv_update_pack_status', 'update_pack_status');

function update_pack_status() {
    $target_product_id = 9967; // Replace with the ID of the specific product
    $cart_items = WC()->cart->get_cart();
    $pack_quantity = 0;
    $cart_quantity = 0;

    foreach ($cart_items as $cart_item_key => $cart_item) {
        if ($cart_item['product_id'] == $target_product_id) {
            if (isset($cart_item['wsf_item_data']) && !empty($cart_item['wsf_item_data'])) {
                foreach ($cart_item['wsf_item_data'] as $meta_data) {
                    if (isset($meta_data['key']) && $meta_data['key'] === 'Select your pack') {
                        $pack_quantity = intval($meta_data['value']);
                    }
                }
            }
            $cart_quantity += $cart_item['quantity'];
        }
    }

    $pack_status = $cart_quantity . '/' . $pack_quantity;
    wp_send_json_success(array('pack_status' => $pack_status));
}
